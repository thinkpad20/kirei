type Bool = True | False;

sig && : Bool -> Bool -> Bool;
sig || : Bool -> Bool -> Bool;
sig not : Bool -> Bool;
sig + : Number -> Number -> Number;
sig - : Number -> Number -> Number;
sig * : Number -> Number -> Number;
sig / : Number -> Number -> Number;
sig > : Number -> Number -> Bool;
sig < : Number -> Number -> Bool;
sig >= : Number -> Number -> Bool;
sig <= : Number -> Number -> Bool;
sig == : Number -> Number -> Bool;
sig ++ : String -> String -> String;
sig print : String -> IO -> ();
sig println : String -> IO -> ();
sig defaultShow : a -> String;
sig undefined : a;
sig $IO : IO;

type Tree a = Leaf | Branch a (Tree a) (Tree a);

let singleton a = Branch a Leaf Leaf;

let contains a tree = case tree of
  Leaf -> False
| Branch b left right ->
    if a == b then True
    else if a < b then contains a left
    else contains a right;

let insert a tree = case tree of
  Leaf -> Branch a Leaf Leaf
| Branch b left right ->
    if a == b then tree
    else if a < b then Branch b (insert a left) right
    else Branch b left (insert a right);

let tree1 = singleton 2;
let tree2 = insert 3 (insert 1 tree1);
let contains1 = contains 1 tree1;

println (defaultShow tree2) $IO;
